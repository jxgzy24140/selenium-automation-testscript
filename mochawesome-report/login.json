{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-25T02:44:17.823Z",
    "end": "2024-03-25T02:44:47.813Z",
    "duration": 29990,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1ba99b27-aba7-4611-93fc-c6fb3fafd8b0",
      "title": "",
      "fullFile": "D:\\Lab\\seminar\\Selenium2\\loginWithMocha.js",
      "file": "\\loginWithMocha.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
          "title": "Login Test",
          "fullFile": "D:\\Lab\\seminar\\Selenium2\\loginWithMocha.js",
          "file": "\\loginWithMocha.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Test\"",
              "fullTitle": "Login Test \"before all\" hook in \"Login Test\"",
              "timedOut": false,
              "duration": 3273,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\nthis.timeout(30000);\nawait driver.get(\"http://localhost:3000/auth/login\");\nawait driver.wait(until.elementLocated(By.id(\"email\")), 7000);\nawait driver.wait(until.elementLocated(By.id(\"password\")), 7000);\nawait setMySelector(driver, mySelector);",
              "err": {},
              "uuid": "0b064989-e0ed-4a27-b3d2-87488ae01b7b",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Test\"",
              "fullTitle": "Login Test \"after all\" hook in \"Login Test\"",
              "timedOut": false,
              "duration": 131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "83125fab-392c-4f42-aa7c-03979a9be3cd",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Đăng nhập thành công",
              "fullTitle": "Login Test Đăng nhập thành công",
              "timedOut": false,
              "duration": 4037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "02f66a43-7627-47d6-8c4f-849a74f147ce",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đăng nhập thất bại, tên đăng nhập bắt đầu bằng số",
              "fullTitle": "Login Test Đăng nhập thất bại, tên đăng nhập bắt đầu bằng số",
              "timedOut": false,
              "duration": 4596,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "08066e11-8b58-4157-958b-b49142c91f42",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đăng nhập thất bại, tên đăng nhập chứa khoảng trắng",
              "fullTitle": "Login Test Đăng nhập thất bại, tên đăng nhập chứa khoảng trắng",
              "timedOut": false,
              "duration": 4490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "7be17855-eea0-4683-94a6-1b82a3c98115",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đăng nhập thất bại, mật khẩu quá ngắn",
              "fullTitle": "Login Test Đăng nhập thất bại, mật khẩu quá ngắn",
              "timedOut": false,
              "duration": 4459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "87098936-e8f4-4ace-ac24-0a329360b513",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đăng nhập thất bại, mật khẩu chứa khoảng trắng",
              "fullTitle": "Login Test Đăng nhập thất bại, mật khẩu chứa khoảng trắng",
              "timedOut": false,
              "duration": 4498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "f7d3c1c0-242a-4681-ac68-04eac194a631",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đăng nhập thất bại, tên đăng nhập quá ngắn",
              "fullTitle": "Login Test Đăng nhập thất bại, tên đăng nhập quá ngắn",
              "timedOut": false,
              "duration": 4490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-01']\")),\n  7000\n);\nawait driver.wait(\n  until.elementLocated(By.css(\"[test-id='test-02']\")),\n  7000\n);\nconst usernameInput = await driver.findElement(\n  By.css(\"[test-id='test-01']\")\n);\nawait usernameInput.sendKeys(account.username);\nconst passwordInput = await driver.findElement(\n  By.css(\"[test-id='test-02']\")\n);\nawait passwordInput.sendKeys(account.password);\nawait driver.findElement(By.id(\"submit-btn\")).click();\nawait driver.wait(\n  until.elementLocated(By.css(\"div.Toastify__toast-body > div\")),\n  50000\n);\nconst div = await driver.findElement(\n  By.css(\"div.Toastify__toast-body > div\")\n);\nconst value = await div.getAttribute(\"innerHTML\");\nif (value === account.assert) {\n  console.log(\n    `Test case passed for account: ${account.username}, ${account.assert}, ${value}`\n  );\n} else {\n  console.log(`Test case failed for account: ${account.username}`);\n}\nif (account.success) {\n  await driver.wait(until.urlIs(\"http://localhost:3000/home\"), 5000);\n  const currentUrl = await driver.getCurrentUrl();\n  assert.strictEqual(currentUrl, \"http://localhost:3000/home\");\n  let userIcon = await driver.findElement(By.id(\"user-icon\"));\n  await driver.actions().move({ origin: userIcon }).perform();\n  await driver.wait(until.elementLocated(By.id(\"logout\")), 7000);\n  await driver.findElement(By.id(\"logout\")).click();\n  await driver.wait(until.elementLocated(By.id(\"email\")), 7000);\n  await driver.wait(until.elementLocated(By.id(\"password\")), 7000);\n  await setMySelector(driver, mySelector);\n} else {\n  assert.strictEqual(value, account.assert);\n  await usernameInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await passwordInput.sendKeys(Key.chord(Key.CONTROL, \"a\", Key.DELETE));\n  await driver.sleep(4000);\n}",
              "err": {},
              "uuid": "96ec7405-b2db-4088-b9f7-07522210261a",
              "parentUUID": "6f4a54e3-198c-43e3-994e-7b422dd92d92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f66a43-7627-47d6-8c4f-849a74f147ce",
            "08066e11-8b58-4157-958b-b49142c91f42",
            "7be17855-eea0-4683-94a6-1b82a3c98115",
            "87098936-e8f4-4ace-ac24-0a329360b513",
            "f7d3c1c0-242a-4681-ac68-04eac194a631",
            "96ec7405-b2db-4088-b9f7-07522210261a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26570,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "login",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "'reportDir": "reports/mochawesome",
        "reportFilename": "login",
        "reportTitle": "LOGIN"
      },
      "version": "6.2.0"
    }
  }
}